{"version":3,"file":"background.js","mappings":"mBAAA,MAyDA,EAzDe,CACXA,mBAAoBC,MAAOC,EAAQC,EAAQ,eACvC,IAAIC,EACJ,MAAMC,QAAiBC,MAAM,sCAAuC,CAChEC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CAAER,QAAOD,aAElC,IAAKG,EAASO,GAAI,OACUP,EAASQ,OAEjC,MAAM,IAAIC,MAAM,qBAAqBT,EAASU,UAAUV,EAASW,aACrE,CACA,MAAMC,EAAkC,QAAxBb,EAAKC,EAASI,YAAyB,IAAPL,OAAgB,EAASA,EAAGc,YAC5E,IAAKD,EACD,MAAM,IAAIH,MAAM,4CAEpB,MAAMK,EAAU,IAAIC,YACpB,IAAIC,EAAS,GACTC,EAAe,KACnB,OAAa,CACT,MAAM,KAAEC,EAAI,MAAEC,SAAgBP,EAAOQ,OACrC,GAAIF,EACA,MAEJF,GADcF,EAAQO,OAAOF,EAAO,CAAEG,QAAQ,IAG9C,MAAMC,EAAQP,EAAOQ,MAAM,MAC3BR,EAASO,EAAME,OAAS,GACxB,IAAK,MAAMC,KAAQH,EACf,GAAoB,KAAhBG,EAAKC,OAET,IAEIV,EADaZ,KAAKuB,MAAMF,EAE5B,CACA,MAAOG,GAEP,CAER,CACA,OAAOZ,CAAY,EAGvBa,eAAgBlC,UACZ,IAII,OAA2B,aAHJK,MAAM,qCAAsC,CAC/DC,OAAQ,SAEIQ,MACpB,CACA,MAAOqB,GAEH,OAAO,CACX,ICtCR,MACA,EADsB,IAftB,MACI,sBAAMC,CAAiBnC,EAAQoC,EAAU,CAAC,GACtC,MAAM,MAAEnC,EAAQ,SAAQ,YAAEoC,EAAc,IAAQD,EAChD,IACI,aAAa,EAAOtC,mBAAmBE,EAAQC,EACnD,CACA,MAAOiC,GAEH,MAAMA,CACV,CACJ,CACA,oBAAMD,GACF,aAAa,EAAOA,gBACxB,GCVJK,OAAOC,QAAQC,YAAYC,aAAY,KAGnCH,OAAOI,QAAQC,KAAKC,IAAI,CACpBC,eAAgB,wBAChBC,kBAAmB,qBACrB,IAGN,WAII,SAF0B,EAAcb,iBAIpC,UAC2B,EAAcE,iBAAiB,iBAE1D,CACA,MAAOD,GAEP,CAEP,EAdD,GAgBAI,OAAOS,OAAOC,UAAUP,aAAaQ,IACjCX,OAAOY,UAAUC,WAAW,CAAEC,KAAM,eAAgB,UACjCC,IAAXJ,EAAIK,SAAqCD,IAAjBJ,EAAIM,UAC5BjB,OAAOY,UAAUM,KAAK,CAAEC,MAAOR,EAAIK,GAAIC,SAAUN,EAAIM,UACzD,GACF,IAGNjB,OAAOC,QAAQmB,UAAUjB,aAAY,CAACkB,EAASC,EAAQC,KACnD,GAAuB,uBAAnBF,EAAQZ,QACW,qBAAnBY,EAAQZ,OA2BR,OAzBAT,OAAOwB,KAAKC,MAAM,CAAEC,QAAQ,EAAMC,eAAe,IAASH,IACtD,MAAMI,EAAYJ,EAAK,GACvB,KAAMI,aAA6C,EAASA,EAAUZ,IAElE,YADAO,EAAa,CAAE3B,MAAO,wBAG1B,MAAMuB,EAAQS,EAAUZ,GAExBhB,OAAOwB,KAAKK,YAAYV,EAAOE,GAAUxD,IACjCmC,OAAOC,QAAQ6B,UAEf9B,OAAO+B,UAAUC,cAAc,CAC3BC,OAAQ,CAAEd,SACVe,MAAO,CAAC,sBACT,KAEClC,OAAOwB,KAAKK,YAAYV,EAAOE,GAAUc,IACrCZ,EAAaY,EAAc,GAC7B,IAIVZ,EAAa1D,EAAS,GACxB,KAEC,CACX,G","sources":["webpack://claire-ai-assistant/./src/api/ollamaApi.ts","webpack://claire-ai-assistant/./src/api/ollamaService.ts","webpack://claire-ai-assistant/./src/background.ts"],"sourcesContent":["const ollama = {\n    generateCompletion: async (prompt, model = \"gemma3:4b\") => {\n        var _a;\n        const response = await fetch('http://localhost:11434/api/generate', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ model, prompt })\n        });\n        if (!response.ok) {\n            const errorText = await response.text();\n            console.error(`Ollama generateCompletion error: ${response.status} ${response.statusText} - ${errorText}`);\n            throw new Error(`Ollama API error: ${response.status} ${response.statusText}`);\n        }\n        const reader = (_a = response.body) === null || _a === void 0 ? void 0 : _a.getReader();\n        if (!reader) {\n            throw new Error(\"Failed to get reader from response body.\");\n        }\n        const decoder = new TextDecoder();\n        let result = '';\n        let lastResponse = null;\n        while (true) {\n            const { done, value } = await reader.read();\n            if (done)\n                break;\n            const chunk = decoder.decode(value, { stream: true });\n            result += chunk;\n            // Process each line as a separate JSON object\n            const lines = result.split('\\n');\n            result = lines.pop() || ''; // Keep the last (possibly incomplete) line\n            for (const line of lines) {\n                if (line.trim() === '')\n                    continue;\n                try {\n                    const json = JSON.parse(line);\n                    lastResponse = json; // Keep track of the last successful parse\n                }\n                catch (e) {\n                    console.warn(\"Failed to parse JSON line:\", line, e);\n                }\n            }\n        }\n        return lastResponse; // Return the last successfully parsed JSON object\n    },\n    // Add test connection function\n    testConnection: async () => {\n        try {\n            const response = await fetch('http://localhost:11434/api/version', {\n                method: 'GET'\n            });\n            return response.status === 200;\n        }\n        catch (error) {\n            console.warn(\"Ollama server not available:\", error);\n            return false;\n        }\n    }\n};\nexport default ollama;\n","import ollama from \"./ollamaApi\";\nclass OllamaService {\n    async generateResponse(prompt, options = {}) {\n        const { model = \"llama3\", temperature = 0.7 } = options;\n        try {\n            return await ollama.generateCompletion(prompt, model);\n        }\n        catch (error) {\n            console.error(\"Ollama generation error:\", error);\n            throw error;\n        }\n    }\n    async testConnection() {\n        return await ollama.testConnection();\n    }\n}\nconst ollamaService = new OllamaService();\nexport default ollamaService;\n","// This background script handles events from the Chrome extension API\n// and manages communication between different parts of the extension\nimport ollamaService from \"./api/ollamaService\";\n// Listen for installation\nchrome.runtime.onInstalled.addListener(() => {\n    console.log(\"Claire AI Assistant installed\");\n    // Set default settings\n    chrome.storage.sync.set({\n        lmStudioApiUrl: \"http://localhost:6223\",\n        lmStudioModelName: \"google/gemma-3-4b\",\n    });\n});\n// Temporary test for Ollama connection and generation\n(async () => {\n    console.log(\"Attempting Ollama connection test...\");\n    const isConnected = await ollamaService.testConnection();\n    console.log(\"Ollama connection status:\", isConnected);\n    if (isConnected) {\n        console.log(\"Attempting Ollama generateCompletion...\");\n        try {\n            const response = await ollamaService.generateResponse(\"Hello, Ollama!\");\n            console.log(\"Ollama generateCompletion response:\", response);\n        }\n        catch (error) {\n            console.error(\"Ollama generateCompletion failed:\", error);\n        }\n    }\n})();\n// Handle clicking the extension icon\nchrome.action.onClicked.addListener((tab) => {\n    chrome.sidePanel.setOptions({ path: \"popup.html\" }, () => {\n        if (tab.id !== undefined && tab.windowId !== undefined) {\n            chrome.sidePanel.open({ tabId: tab.id, windowId: tab.windowId });\n        }\n    });\n});\n// Listen for messages from content scripts or popup\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n    if (message.action === \"extractPageContent\" ||\n        message.action === \"extractVideoInfo\") {\n        // Get the active tab\n        chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {\n            const activeTab = tabs[0];\n            if (!(activeTab === null || activeTab === void 0 ? void 0 : activeTab.id)) {\n                sendResponse({ error: \"No active tab found\" });\n                return;\n            }\n            const tabId = activeTab.id; // Capture in a const to ensure type stability\n            // Forward the message to content script\n            chrome.tabs.sendMessage(tabId, message, (response) => {\n                if (chrome.runtime.lastError) {\n                    // If content script is not ready/injected, inject it and try again\n                    chrome.scripting.executeScript({\n                        target: { tabId },\n                        files: [\"contentScript.js\"],\n                    }, () => {\n                        // After injection, try sending the message again\n                        chrome.tabs.sendMessage(tabId, message, (retryResponse) => {\n                            sendResponse(retryResponse);\n                        });\n                    });\n                    return;\n                }\n                sendResponse(response);\n            });\n        });\n        return true; // Required for async sendResponse\n    }\n});\n"],"names":["generateCompletion","async","prompt","model","_a","response","fetch","method","headers","body","JSON","stringify","ok","text","Error","status","statusText","reader","getReader","decoder","TextDecoder","result","lastResponse","done","value","read","decode","stream","lines","split","pop","line","trim","parse","e","testConnection","error","generateResponse","options","temperature","chrome","runtime","onInstalled","addListener","storage","sync","set","lmStudioApiUrl","lmStudioModelName","action","onClicked","tab","sidePanel","setOptions","path","undefined","id","windowId","open","tabId","onMessage","message","sender","sendResponse","tabs","query","active","currentWindow","activeTab","sendMessage","lastError","scripting","executeScript","target","files","retryResponse"],"sourceRoot":""}