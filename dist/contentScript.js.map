{"version":3,"file":"contentScript.js","mappings":"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","sources":["webpack://claire-ai-assistant/./src/contentScript.ts"],"sourcesContent":["\"use strict\";\n// This content script runs in the context of web pages\n// It can access and manipulate the DOM of the page it's injected into\n// Listen for messages from the popup or background script\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n    console.log('Content script received message:', message);\n    if (message.action === 'extractPageContent') {\n        try {\n            const pageContent = extractPageContent();\n            console.log('Extracted page content:', pageContent);\n            sendResponse({ content: pageContent });\n        }\n        catch (error) {\n            console.error('Error extracting page content:', error);\n            sendResponse({ error: 'Failed to extract page content' });\n        }\n    }\n    else if (message.action === 'extractPdfContent') {\n        sendResponse({ status: 'PDF extraction not supported in content script' });\n    }\n    else if (message.action === 'extractVideoInfo') {\n        try {\n            const videoInfo = extractVideoInfo();\n            console.log('Extracted video info:', videoInfo);\n            sendResponse({ info: videoInfo });\n        }\n        catch (error) {\n            console.error('Error extracting video info:', error);\n            sendResponse({ error: 'Failed to extract video information' });\n        }\n    }\n    return true; // Required to use sendResponse asynchronously\n});\n// Function to extract page content\nfunction extractPageContent() {\n    var _a, _b;\n    try {\n        // Get the page title\n        const title = document.title;\n        // Get meta description\n        const metaDescription = ((_a = document.querySelector('meta[name=\"description\"]')) === null || _a === void 0 ? void 0 : _a.getAttribute('content')) ||\n            ((_b = document.querySelector('meta[property=\"og:description\"]')) === null || _b === void 0 ? void 0 : _b.getAttribute('content')) || '';\n        // Get main content with improved selection and error handling\n        let mainContent = '';\n        const contentSelectors = [\n            'main',\n            'article',\n            '[role=\"main\"]',\n            '#content',\n            '.content',\n            'body'\n        ];\n        for (const selector of contentSelectors) {\n            const element = document.querySelector(selector);\n            if (element === null || element === void 0 ? void 0 : element.textContent) {\n                mainContent = element.textContent;\n                break;\n            }\n        }\n        // Get headings with their hierarchy\n        const headings = Array.from(document.querySelectorAll('h1, h2, h3')).map(h => {\n            var _a;\n            return ({\n                level: h.tagName.toLowerCase(),\n                text: ((_a = h.textContent) === null || _a === void 0 ? void 0 : _a.trim()) || ''\n            });\n        });\n        // Get important links (filter out navigation/footer links)\n        const mainContentElement = document.querySelector('main') || document.querySelector('article');\n        const links = Array.from(mainContentElement ? mainContentElement.querySelectorAll('a') : document.querySelectorAll('a'))\n            .map(a => {\n            var _a;\n            return ({\n                text: ((_a = a.textContent) === null || _a === void 0 ? void 0 : _a.trim()) || '',\n                href: a.href,\n                isImportant: !a.closest('nav') && !a.closest('footer')\n            });\n        })\n            .filter(link => link.isImportant)\n            .slice(0, 100);\n        // Get key images (excluding tiny images and icons)\n        const images = Array.from(document.querySelectorAll('img'))\n            .map(img => ({\n            alt: img.alt,\n            src: img.src,\n            width: img.width,\n            height: img.height\n        }))\n            .filter(img => img.width > 100 && img.height > 100)\n            .slice(0, 20);\n        const result = {\n            url: window.location.href,\n            title,\n            metaDescription,\n            mainContent: mainContent.substring(0, 10000000), // Limit content size\n            headings,\n            links,\n            images\n        };\n        console.log('Extracted content:', result);\n        return result;\n    }\n    catch (error) {\n        console.error('Error in extractPageContent:', error);\n        throw error;\n    }\n}\n// Function to extract video information (for YouTube and similar sites)\nfunction extractVideoInfo() {\n    var _a, _b, _c, _d, _e;\n    // Check if we're on YouTube\n    const isYouTube = window.location.hostname.includes('youtube.com');\n    if (isYouTube) {\n        // Get video title\n        const videoTitle = ((_a = document.querySelector('h1.title')) === null || _a === void 0 ? void 0 : _a.textContent) ||\n            ((_b = document.querySelector('h1')) === null || _b === void 0 ? void 0 : _b.textContent) ||\n            'Unknown Video Title';\n        // Get video description\n        const videoDescription = ((_c = document.querySelector('div#description')) === null || _c === void 0 ? void 0 : _c.textContent) ||\n            'No description available';\n        // Get channel name\n        const channelName = ((_d = document.querySelector('[class*=\"owner-name\"]')) === null || _d === void 0 ? void 0 : _d.textContent) ||\n            'Unknown Channel';\n        // Get video duration if available\n        const videoDuration = ((_e = document.querySelector('.ytp-time-duration')) === null || _e === void 0 ? void 0 : _e.textContent) ||\n            'Unknown Duration';\n        return {\n            platform: 'YouTube',\n            title: videoTitle.trim(),\n            channel: channelName.trim(),\n            description: videoDescription.trim().substring(0, 1000), // Limit description size\n            duration: videoDuration,\n            url: window.location.href\n        };\n    }\n    // Generic video detection for other sites\n    const videoElements = document.querySelectorAll('video');\n    if (videoElements.length > 0) {\n        return {\n            platform: 'Generic',\n            title: document.title,\n            videoCount: videoElements.length,\n            url: window.location.href\n        };\n    }\n    return {\n        platform: 'Unknown',\n        title: document.title,\n        message: 'No video detected on this page',\n        url: window.location.href\n    };\n}\n"],"names":["chrome","runtime","onMessage","addListener","message","sender","sendResponse","action","content","_a","_b","title","document","metaDescription","querySelector","getAttribute","mainContent","contentSelectors","selector","element","textContent","headings","Array","from","querySelectorAll","map","h","level","tagName","toLowerCase","text","trim","mainContentElement","links","a","href","isImportant","closest","filter","link","slice","images","img","alt","src","width","height","url","window","location","substring","error","extractPageContent","status","info","_c","_d","_e","hostname","includes","videoTitle","videoDescription","channelName","videoDuration","platform","channel","description","duration","videoElements","length","videoCount","extractVideoInfo"],"sourceRoot":""}